from turtle import *
from random import randrange
from freegames import square, vector
import random

'''
Equipo 8: Iván Gutiérrez, Abraham Mora 

5.1 La comida podrá moverse al azar un paso a la vez y no deberá de salirse de la ventana

6.1 Cada vez que se corra el juego, la víbora y la comida deberán tener colores diferentes entre sí, pero al azar, de una serie de 5 diferentes colores, excepto el rojo.
'''

food = vector(0, 0) #Para crear el vector comida
snake = [vector(10, 0)] #Para crear el vector Snake
mov_food = [vector(-10,0),vector(10,0),vector(0,10),vector(0,-10)] #Vector de posibles movimientos de la comida
aim = vector(0, -10) #Para crear el vector Aim, que estara trabajando junto con el vector Snake

food = vector(0, 0)
snake = [vector(10, 0)]
aim = vector(0, -10)
color= ['green','yellow','blue','black','cyan'] # vector o lista de colores 
snake_color= random.choice(color) # escoge color aleatorio de la lista
food_color= random.choice(color) 

''' En esta parte se decide que si el color de la comida y de la serpiente son iguales, 
se cambie el color de la comida para que sean diferentes mediantes un estatuto condicional'''

while food_color == snake_color:
    food_color= random.choice(color)
snake_color= random.choice(color) # aleatorio para color de serpiente
food_color= random.choice(color)  # aleatorio para color de comida
food_color2=[] # backup color comida

''' En esta parte se decide que si el color de la comida y de la serpiente son iguales, se cambie el color de la comida para que sean diferentes mediantes un estatuto condicional if'''

if food_color == snake_color:
    food_color_2= random.choice(color)
else:
    food_color_2= food_color

"Función change"
def change(x, y):
    "Change snake direction."
    aim.x = x
    aim.y = y
    #Sirve para cambiar la dirección de Snake
    
"Función inside"
def inside(head):
    "Return True if head inside boundaries." 
    return -200 < head.x < 190 and -200 < head.y < 190 
    # Regresa True si la cabeza de Snake esta adentro de los limites

"Función move"
def move():
    global snake_color, food_color
    "Move snake forward one segment." # Hace que se mueva el Snake un paso adelante
    write('Equipo 8')
    head = snake[-1].copy()
    #mueve head en la dirección indicada por el usuario
    head.move(aim)
    # Mueve en vector(-10,0),vector(10,0),vector(0,10),vector(0,-10)
   
    #Este if es para decir cuando es cuando perdemos:
    #Cuando la cabeza esta en el cuerpo o si choco en los limites. Se hace roja la cabeza
    if not inside(head) or head in snake:
        square(head.x, head.y, 9, 'red')
        update()
        return

    snake.append(head) # len=2
    
    longitud= len(snake)

    #Este if es para el caso de obtener la comida"
    if head == food:
        print('Snake:', longitud)
        food.x = randrange(-15, 15) * 10
        food.y = randrange(-15, 15) * 10
        ant_snake= snake_color
        ant_food= food_color
        snake_color= random.choice(color)
        
        ''' COMPARA QUE LOS COLORES NO SE REPITAN Y QUE CAMBIEN RESPECTO AL ANTERIOR ''' 
        
        while ant_snake == snake_color:
            snake_color= random.choice(color)
        food_color= random.choice(color)
        while (food_color == snake_color) \
            or (food_color == ant_food):
            food_color= random.choice(color)
    else:
        snake.pop(0)
    
   #borra el rastro del snake
    clear()
    
    # dibuja el cuerpo del snake y de la comida
    for body in snake:
        square(body.x, body.y, 9, snake_color)  
    square(food.x, food.y, 9, food_color)

    #Mover aleatoriamente la comida
    food.move(mov_food[randrange(0,4)])

    #Validar la nueva posición este dentro de los limites
    if not inside(food) or food in snake:
        square(food.x, food.y, 9, 'red')
        write("La comida esta dentro del snake o salio de la pantalla")
        update() #Actualizar
        return
            
    # Borra todo el contenido de la ventana
    clear()


    # Dibuja el cuerpo de la serpiente
    for body in snake:
        square(body.x, body.y, 9, 'black') #El color del cuerpo del Snake

    # Dibuja la comida
    square(food.x, food.y, 9, 'green')
    square(body.x, body.y, 9, snake_color)

    square(food.x, food.y, 9, food_color_2)
    update()
    ontimer(move, 100) #Llamado de la función move, haciendo "mover" el Snake cada 100 milisegundos

setup(420, 420, 370, 0) #Los limites de la pantalla
hideturtle()
tracer(False)

"Es aqui el lugar donde definimos con lambdas los botones para mover al Snake"
listen()
onkey(lambda: change(10, 0), 'Right')
onkey(lambda: change(-10, 0), 'Left')
onkey(lambda: change(0, 10), 'Up')
onkey(lambda: change(0, -10), 'Down') #Son los botones a pulsar para cambiar dirección del Snake
move()
done()
